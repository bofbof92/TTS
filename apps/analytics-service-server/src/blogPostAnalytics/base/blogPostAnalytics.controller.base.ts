/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogPostAnalyticsService } from "../blogPostAnalytics.service";
import { BlogPostAnalyticsCreateInput } from "./BlogPostAnalyticsCreateInput";
import { BlogPostAnalytics } from "./BlogPostAnalytics";
import { BlogPostAnalyticsFindManyArgs } from "./BlogPostAnalyticsFindManyArgs";
import { BlogPostAnalyticsWhereUniqueInput } from "./BlogPostAnalyticsWhereUniqueInput";
import { BlogPostAnalyticsUpdateInput } from "./BlogPostAnalyticsUpdateInput";

export class BlogPostAnalyticsControllerBase {
  constructor(protected readonly service: BlogPostAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogPostAnalytics })
  async createBlogPostAnalytics(
    @common.Body() data: BlogPostAnalyticsCreateInput
  ): Promise<BlogPostAnalytics> {
    return await this.service.createBlogPostAnalytics({
      data: data,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogPostAnalytics] })
  @ApiNestedQuery(BlogPostAnalyticsFindManyArgs)
  async blogPostAnalyticsItems(
    @common.Req() request: Request
  ): Promise<BlogPostAnalytics[]> {
    const args = plainToClass(BlogPostAnalyticsFindManyArgs, request.query);
    return this.service.blogPostAnalyticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogPostAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogPostAnalytics(
    @common.Param() params: BlogPostAnalyticsWhereUniqueInput
  ): Promise<BlogPostAnalytics | null> {
    const result = await this.service.blogPostAnalytics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        likes: true,
        postId: true,
        updatedAt: true,
        views: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogPostAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogPostAnalytics(
    @common.Param() params: BlogPostAnalyticsWhereUniqueInput,
    @common.Body() data: BlogPostAnalyticsUpdateInput
  ): Promise<BlogPostAnalytics | null> {
    try {
      return await this.service.updateBlogPostAnalytics({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogPostAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogPostAnalytics(
    @common.Param() params: BlogPostAnalyticsWhereUniqueInput
  ): Promise<BlogPostAnalytics | null> {
    try {
      return await this.service.deleteBlogPostAnalytics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          likes: true,
          postId: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
